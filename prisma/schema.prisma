generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  addresses     Address[]
  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
  wishlistItems WishlistItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  logo        String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("brands")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Decimal        @db.Decimal(10, 2)
  comparePrice  Decimal?       @db.Decimal(10, 2)
  images        String[]
  sku           String?        @unique
  stock         Int            @default(0)
  isActive      Boolean        @default(true)
  isFeatured    Boolean        @default(false)
  slug          String         @unique
  categoryId    String
  brandId       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  brand         Brand?         @relation(fields: [brandId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model Order {
  id                    String        @id @default(cuid())
  userId                String
  status                OrderStatus   @default(PENDING)
  total                 Decimal       @db.Decimal(10, 2)
  subtotal              Decimal       @db.Decimal(10, 2)
  tax                   Decimal       @default(0) @db.Decimal(10, 2)
  shipping              Decimal       @default(0) @db.Decimal(10, 2)
  discount              Decimal       @default(0) @db.Decimal(10, 2)
  paymentStatus         PaymentStatus @default(PENDING)
  paymentMethod         String?
  shippingAddress       Json
  billingAddress        Json?
  notes                 String?
  stripePaymentIntentId String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  orderItems            OrderItem[]
  user                  User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}
